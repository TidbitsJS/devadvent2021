export const findDirection = map => {
    /*

        Find the direction in which the sleigh has to go in order to arrive at the North Pole the fastest.

        This function accepts a single input parameter map, generated by generateMap (see above!). The return value should be an array that describes the direction:
        ['up']
        ['down']
        ['left']
        ['right']
        ['up', 'right']
        ['up', 'left']
        ['down', 'right']
        ['down', 'left']
        
        If there is no direction to go to (possibly arrived at the destination), return null

        These should be the indications into which direction on the map the sleigh has to fly towards.

    */

    // get the position of the 'S'
    const sleighPosition = map.findIndex(row => row.indexOf('S') !== -1);
    const sleighRow = map[sleighPosition];
    const sleighColumn = sleighRow.indexOf('S');

    // get the position of the 'N'
    const northPosition = map.findIndex(row => row.indexOf('N') !== -1);
    const northRow = map[northPosition];
    const northColumn = northRow.indexOf('N');

    const directions = [];

    // check if the sleigh is above the north pole
    if (sleighPosition > northPosition) {
        directions.push('up');
    } else if (sleighPosition < northPosition) {
        directions.push('down');
    } else {
        return null;
    }

    // check if the sleigh is to the left of the north pole
    if (sleighColumn > northColumn) {
        directions.push('left');
    } else if (sleighColumn < northColumn) {
        directions.push('right');
    } else {
        return null;
    }

    return directions;
}


export const navigateMap = (map, direction) => {
    // update the 'S' position in the map according to the direction
    const sleighPosition = map.findIndex(row => row.indexOf('S') !== -1);
    const sleighRow = map[sleighPosition];
    const sleighColumn = sleighRow.indexOf('S');

    const newMap = [...map];

    if (direction === 'up') {
        newMap[sleighPosition - 1][sleighColumn] = 'S';
        newMap[sleighPosition][sleighColumn] = '#';
    } else if (direction === 'down') {
        newMap[sleighPosition + 1][sleighColumn] = 'S';
        newMap[sleighPosition][sleighColumn] = '#';
    } else if (direction === 'left') {
        newMap[sleighPosition][sleighColumn - 1] = 'S';
        newMap[sleighPosition][sleighColumn] = '#';
    } else if (direction === 'right') {
        newMap[sleighPosition][sleighColumn + 1] = 'S';
        newMap[sleighPosition][sleighColumn] = '#';
    }

    return newMap;
}
